#debug_mode=yes
log_level=3
stderror_enabled=yes
syslog_facility=LOG_LOCAL0
open_files_limit=512

udp_workers=1
tcp_workers=1

#disable_dns_blacklist=no

#dns_try_ipv6=yes

socket=udp:0.0.0.0:8060 #as 172.20.10.6:8060
socket=tcp:0.0.0.0:8060 #as 172.20.10.6:8060
#socket=tls:*:8061 as 172.20.10.6:8060

#socket=udp:localhost:8060
#socket=tcp:localhost:8060
advertised_address=172.20.10.6
advertised_port=8060

db_max_async_connections=2
db_default_url="postgres://postgres:postgres@172.168.34.52:5432/opensips"

xlog_print_level = 2 #L_NOTICE

####### Modules Section ########

#set module path
mpath="/usr/local/lib64/opensips/modules/"
xlog_print_level = 2 #L_NOTICE

####### Modules Section ########

## Load postgres module
loadmodule "db_postgres.so"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

##### AVPops module
loadmodule "avpops.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 120)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 1)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

#### MYSQL module
#loadmodule "db_mysql.so"

#### HTTPD module
loadmodule "httpd.so"
modparam("httpd", "port", 8888)

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "working_mode_preset", "single-instance-sql-write-back")


#### REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")
modparam("registrar", "received_avp", "$avp(received_nh)")
#modparam("registrar", "max_contacts", 10)

#### ACCounting module
loadmodule "acc.so"
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 1)
modparam("acc", "detect_direction", 1)
modparam("acc", "extra_fields", "db: src_user; src_domain; src_ip; dst_ouser; dst_user; dst_domain ")
modparam("acc", "log_level", 3)   # Set log_level to 3


#### AUTHentication modules

loadmodule "auth.so"
loadmodule "auth_db.so"
modparam("auth_db", "calculate_ha1", 0)
#modparam("auth_db", "password_column", "password")
modparam("auth_db", "load_credentials", "")

#### ALIAS module
loadmodule "alias_db.so"

#### URI module
# loadmodule "uri.so"
# modparam("uri", "use_domain", 1)

#### Load balancer
loadmodule "load_balancer.so"
modparam("load_balancer", "probing_interval", 30)
modparam("load_balancer", "probing_method", "OPTIONS")
modparam("load_balancer", "probing_from", "sip:pinger@172.20.10.6:8060")
# consider positive 404 as postivite reply
modparam("load_balancer", "probing_reply_codes", "200,404,500,501")
modparam("load_balancer", "probing_verbose", 1)



#### DOMAIN module
loadmodule "domain.so"
modparam("domain", "db_mode", 1)   # Use caching
modparam("auth_db|usrloc", "use_domain", 1)

### Nat helper
loadmodule "nathelper.so"
modparam("nathelper", "natping_interval", 30)
#modparam("nathelper", "ping_nated_only", 1)
#modparam("nathelper", "sipping_bflag", FLB_NATSIPPING)
modparam("nathelper", "sipping_bflag", "SIP_PING_FLAG")
modparam("nathelper", "sipping_from", "sip:pinger@172.20.10.6")


###  Nat Traversal
loadmodule "nat_traversal.so"
modparam("nat_traversal", "keepalive_interval", 90)
modparam("nat_traversal", "keepalive_method", "OPTIONS")
modparam("nat_traversal", "keepalive_from", "sip:keepalive@172.20.10.6")
modparam("nat_traversal", "keepalive_state_file", "/var/run/opensips/keepalive_state")
modparam("nat_traversal", "keepalive_extra_headers", "User-Agent: OpenSIPS\r\n")

# Load rtpproxy module
loadmodule "rtpproxy.so"

## rtpproxy High availablity and load balacing using static configuration
modparam("rtpproxy", "rtpproxy_sock", "udp:172.168.34.55:8844")

# rtpproxy db enpoint
# modparam("rtpproxy", "db_url", "postgres://postgres:postgres@172.168.34.52:5432/opensips")
# modparam("rtpproxy", "db_table", "rtpproxy_sockets")
# modparam("rtpproxy", "rtpp_socket_col", "rtpproxy_sock")
# modparam("rtpproxy", "set_id_col", "set_id")

#Opensips rtpproxy module for Media timeout notifications requests
modparam("rtpproxy", "rtpp_notify_socket", "tcp:0.0.0.0:8844")

#### two rtpp instances does not work on same machine
### https://github.com/OpenSIPS/opensips/issues/865

modparam("rtpproxy", "rtpproxy_autobridge", 1)
modparam("rtpproxy", "nortpproxy_str", "a=sdpmangled:yes\r\n")



# Dialog module
loadmodule "dialog.so"
modparam("dialog", "db_mode", 0)


### UAC module
loadmodule "uac.so"
modparam("uac","restore_mode","auto")


####  MI_HTTP module
loadmodule "mi_http.so"

loadmodule "proto_udp.so"
loadmodule "proto_tcp.so"
#loadmodule "proto_tls.so"

# loadmodule "tls_mgm.so"
# modparam("tls_mgm","server_domain", "default")
# modparam("tls_mgm","match_ip_address", "[default]*")
# modparam("tls_mgm","verify_cert", "[default]1")
# modparam("tls_mgm","require_cert", "[default]0")
# modparam("tls_mgm","tls_method", "[default]SSLv1")
# modparam("tls_mgm","certificate", "[default]/etc/opensips/tls/user/user-cert.pem")
# modparam("tls_mgm","private_key", "[default]/etc/opensips/tls/user/user-privkey.pem")
# modparam("tls_mgm","ca_list", "[default]/etc/opensips/tls/user/user-calist.pem")
#


#### Permissions module
loadmodule "permissions.so"

modparam("permissions", "check_all_branches", 0)

modparam("permissions", "db_url", "postgres://postgres:postgres@172.168.34.52:5432/opensips")
modparam("permissions", "address_table", "address")
modparam("permissions", "grp_col", "grp")
modparam("permissions", "ip_col", "ip")
modparam("permissions", "mask_col", "mask")
modparam("permissions", "port_col", "port")
modparam("permissions", "proto_col", "proto")
modparam("permissions", "pattern_col", "pattern")
modparam("permissions", "info_col", "context_info")



## load cfg utilities module
loadmodule "cfgutils.so"
modparam("cfgutils", "initial_probability", 15)

# # load redis client for opensips
# loadmodule "cachedb_redis.so"
# modparam("cachedb_redis", "cachedb_url","redis:group1://localhost:6379/")

# ## Load exec module
# loadmodule "exec.so"

####### Routing Logic ########

# main request routing logic

route{

	if (!mf_process_maxfwd_header(10)) {
		send_reply(483,"Too Many Hops");
		exit;
	}

	if (has_totag()) {

		# handle hop-by-hop ACK (no routing required)
		if ( is_method("ACK") && t_check_trans() ) {
			t_relay();
			exit;
		}

		# sequential request within a dialog should
		# take the path determined by record-routing
		if ( !loose_route() ) {
			# we do record-routing for all our traffic, so we should not
			# receive any sequential requests without Route hdr.
			send_reply(404,"Not here");
			exit;
		}

		if (is_method("BYE")) {
			# do accounting even if the transaction fails
			do_accounting("log","failed");
		}

		# route it out to whatever destination was set by loose_route()
		route(relay);
		exit;
	}

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans())
			t_relay();
		exit;
	}

	# absorb retransmissions, but do not create transaction
	t_check_trans();

	if ( !(is_method("REGISTER")  ) ) {
		
		if (is_myself("$fd")) {
					
		} else {
			# if caller is not local, then called number must be local
			
			if (!is_myself("$rd")) { 
				send_reply(403,"Relay Forbidden");
				exit;
			}
		}

	}

	# preloaded route checking
	if (loose_route()) {
		xlog("L_ERR",
			"Attempt to route with preloaded Routes ");
		if (!is_method("ACK"))
			send_reply(403,"Preload Route denied");
		exit;
	}

	# record routing
	if (!is_method("REGISTER|MESSAGE"))
		record_route();

	# account only INVITEs
	if (is_method("INVITE")) {
		
		do_accounting("log");
	}

	
	if (!is_myself("$rd")) {
		append_hf("P-hint: outbound\r\n"); 
		
		route(relay);
	}

	# requests for my domain
	
	if (is_method("PUBLISH|SUBSCRIBE")) {
		send_reply(503, "Service Unavailable");
		exit;
	}

	if (is_method("REGISTER")) {
		# store the registration and generate a SIP reply
		if (!save("location"))
			xlog("failed to register AoR $tu\n");

		exit;
	}

	if ($rU==NULL) {
		# request with no Username in xRURI
		send_reply(484,"Address Incomplete");
		exit;
	}

	# do lookup with method filtering
	if (!lookup("location")) {
		t_reply(404, "Not Found");
		exit;
	}

	# when routing via usrloc, log the missed calls also
	do_accounting("log","missed");
	route(relay);
}


route[relay] {
	# for INVITEs enable some additional helper routes
	if (is_method("INVITE")) {
		t_on_branch("per_branch_ops");
		t_on_reply("handle_nat");
		t_on_failure("missed_call");
	}

	if (!t_relay()) {
		send_reply(500,"Internal Error");
	}
	exit;
}




branch_route[per_branch_ops] {
	xlog("new branch at $ru\n");
}


onreply_route[handle_nat] {
	xlog("incoming reply\n");
}


failure_route[missed_call] {
	if (t_was_cancelled()) {
		exit;
	}

	# uncomment the following lines if you want to block client 
	# redirect based on 3xx replies.
	##if (t_check_status("3[0-9][0-9]")) {
	##t_reply(404,"Not found");
	##	exit;
	##}

	
}




